import { useRef, useState, CSSProperties } from 'react';
import { useSelector } from 'react-redux';
import Select from 'react-select';
import { ClimbingBoxLoader } from 'react-spinners';

import Button from '../../../components/Button';
import useGetToken from '../../../components/hooks/useGetToken';
import { IconUpload } from '../../../components/Icons';
import { CreateVideo } from '../../../services/AppServices';
import Header from '../../client/components/Header/Header';
import Footer from '../Footer';
import './upload.scss';
import ModalRender from '../../.././components/Popper/Modal/Modal';
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-toastify';

function Upload() {
    const ref = useRef(null);
    const Token = useGetToken();
    const history = useNavigate();

    const [selectedOption, setSelectedOption] = useState(null);
    const [fileVideo, setFileVideo] = useState(null);
    const [description, setDescription] = useState('');
    const [music, setMusic] = useState('');
    const [comment, setComment] = useState(true);
    const [Duet, setDuet] = useState(true);
    const [Stitch, setStitch] = useState(true);
    const [linkPreview, setLinkPreview] = useState('');
    const [isOpen, setIsOpen] = useState(false);
    const [isLoading, setIsLoading] = useState(false);

    const isLoggedIn = useSelector((state) => state.user.isLoggedIn);

    const handleClickSelectFile = () => {
        const input = ref.current;

        if (input) {
            input.click();
        }
    };

    const handleToggleModal = () => {
        setIsOpen(!isOpen);
    };

    const options = [
        { value: 'public', label: 'C√¥ng khai' },
        { value: 'friends ', label: 'B·∫°n b√®' },
        { value: 'private', label: 'Ri√™ng t∆∞' },
    ];

    const handleChange = (selectedOption) => {
        setSelectedOption(selectedOption);
    };

    const handleOnchangeFileVideo = async (e) => {
        const file = e.target.files[0];

        if (file) {
            setFileVideo(file);

            const link = URL.createObjectURL(file);
            setLinkPreview(link);
        }
    };

    const handleClickChooseAgainVideo = () => {
        // eslint-disable-next-line no-restricted-globals
        const Check = confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn v·ªõi h√†nh ƒë·ªông c·ªßa m√¨nh?');

        if (Check) {
            setFileVideo(null);
            setLinkPreview('');
        }
    };

    const validate = () => {
        const Arr = [selectedOption, fileVideo, description, music];
        let isValid = true;

        for (let i = 0; i < Arr.length; i++) {
            if (!Arr[i]) {
                alert('B·∫°n ƒë√£ nh·∫≠p thi·∫øu tr∆∞·ªùng');
                isValid = false;
                break;
            }
        }

        return isValid;
    };

    const handleback = () => {
        // eslint-disable-next-line no-restricted-globals
        const Check = confirm('Ti·∫øp t·ª•c ch·ªânh s·ª≠a !');

        if (!Check) {
            history(-1);
        }
    };

    const handleSubmit = async () => {
        if (isLoggedIn) {
            const Check = validate();

            if (Check) {
                const dataBuild = {
                    description,
                    upload_file: fileVideo,
                    thumbnail_time: 5,
                    music,
                    viewable: selectedOption.value,
                    allows: [comment ? 'comment' : '', Duet ? 'duet' : '', Stitch ? 'stitch' : ''],
                };
                setIsLoading(true);
                await CreateVideo(dataBuild, Token);
                setIsLoading(false);
                toast('ü¶Ñ B·∫°n ƒë√£ ƒëƒÉng video th√†nh c√¥ng', {
                    position: 'top-right',
                    autoClose: 5000,
                    hideProgressBar: false,
                    closeOnClick: true,
                    pauseOnHover: true,
                    draggable: true,
                    progress: undefined,
                });
                setSelectedOption(null);
                setFileVideo(null);
                setDescription('');
                setMusic('');
                setLinkPreview('');
            }
        } else {
            setIsOpen(true);
        }
    };

    return (
        <>
            <div className="upload-wrapper">
                <div className="header">
                    <Header />
                </div>
                <div className="body">
                    <div className="container warpper-none-body">
                        <div className="header-upload">
                            <h2>T·∫£i video l√™n</h2>
                            <p>ƒêƒÉng video v√†o t√†i kho·∫£n c·ªßa b·∫°n</p>
                        </div>
                        <div className="row">
                            <div className="col-3 left">
                                <div
                                    className={
                                        fileVideo
                                            ? 'container-item-upload border-color-none d-flex justify-content-center align-items-center'
                                            : 'container-item-upload d-flex justify-content-center align-items-center'
                                    }
                                    onClick={handleClickSelectFile}
                                >
                                    {!fileVideo ? (
                                        <div>
                                            <div className="jsx-render-name text-align-center">
                                                <IconUpload />
                                            </div>
                                            <div className="jsx-render-name title-upload d-flex justify-content-center">
                                                Ch·ªçn video ƒë·ªÉ t·∫£i l√™n
                                            </div>
                                            <div className="jsx-render-name title-item-rule d-flex justify-content-center">
                                                Ho·∫∑c k√©o v√† th·∫£ t·∫≠p tin
                                            </div>
                                            <div className="jsx-render-name title-item-rule d-flex justify-content-center">
                                                MP4 ho·∫∑c WebM
                                            </div>
                                            <div className="jsx-render-name title-item-rule d-flex justify-content-center">
                                                ƒê·ªô ph√¢n gi·∫£i 720x1280 tr·ªü
                                            </div>
                                            <div className="jsx-render-name title-item-rule d-flex justify-content-center">
                                                l√™n
                                            </div>
                                            <div className="jsx-render-name title-item-rule d-flex justify-content-center">
                                                T·ªëi ƒëa 10 ph√∫t
                                            </div>
                                            <div className="jsx-render-name title-item-rule d-flex justify-content-center">
                                                √çt h∆°n 2 GB
                                            </div>
                                            <div
                                                className="jsx-render-name title-item-rule  d-flex justify-content-center"
                                                onClick={handleClickSelectFile}
                                            >
                                                <Button primary>Ch·ªçn t·∫≠p tin</Button>
                                            </div>
                                            <input
                                                ref={ref}
                                                hidden
                                                type="file"
                                                onChange={(e) => handleOnchangeFileVideo(e)}
                                                style={{
                                                    display: 'none',
                                                }}
                                            />
                                        </div>
                                    ) : (
                                        <video controls loop autoPlay>
                                            <source src={linkPreview} />
                                        </video>
                                    )}
                                </div>
                                {fileVideo && (
                                    <div className="choose-agin-video" onClick={handleClickChooseAgainVideo}>
                                        <span>Ch·ªçn l·∫°i videos</span>
                                    </div>
                                )}
                            </div>
                            <div className="col-9 right">
                                <div className="render-body">
                                    <div className="header-upload-right">
                                        <h2 className="title">Nh·∫≠p m·ªôt s√¥ tr∆∞·ªùng b·∫Øt bu·ªôc</h2>
                                    </div>
                                    <div className="d-flex mt-2 flex-column align-items-center warper-upload-input-and-label">
                                        <label className="my-3">Ch√∫ th√≠ch ( description )</label>
                                        <input
                                            value={description}
                                            placeholder="Nh·∫≠p m√¥ t·∫£ video c·ªßa b·∫°n..."
                                            className="form-custom-upload"
                                            onChange={(e) => setDescription(e.target.value)}
                                        />
                                    </div>
                                    <div className="d-flex mt-2 flex-column align-items-center warper-upload-input-and-label">
                                        <label className="my-3">Nh·∫°c n·ªÅn video ( music )</label>
                                        <input
                                            placeholder="Nh·∫≠p t√™n b√†i h√°t video s·ª≠ d·ª•ng..."
                                            className="form-custom-upload"
                                            value={music}
                                            onChange={(e) => setMusic(e.target.value)}
                                        />
                                    </div>
                                    <div className="d-flex mt-2 flex-column warper-upload-input-and-label select-upload">
                                        <label className="my-3">Ai c√≥ th·ªÉ xem video n√†y</label>
                                        <Select
                                            className="form-custom-upload-react-select"
                                            value={selectedOption}
                                            onChange={handleChange}
                                            options={options}
                                        />
                                    </div>
                                    <div className="d-flex mt-2 flex-column warper-upload-input-and-label select-upload">
                                        <label className="my-3">Cho ph√©p ng∆∞·ªùi d√πng:</label>
                                        <div className="d-flex gap-5">
                                            <div className="d-inline-flex">
                                                <input
                                                    checked={comment}
                                                    type="checkbox"
                                                    className="form-custom-upload-react-check-box"
                                                    onChange={(e) => setComment(e.target.checked)}
                                                />
                                                <span className="ms-3 checkbox-upload">B√¨nh lu·∫≠n</span>
                                            </div>
                                            <div className="d-inline-flex">
                                                <input
                                                    checked={Duet}
                                                    type="checkbox"
                                                    className="form-custom-upload-react-check-box"
                                                    onChange={(e) => setDuet(e.target.checked)}
                                                />
                                                <span className="ms-3 checkbox-upload">Duet</span>
                                            </div>
                                            <div className="d-inline-flex">
                                                <input
                                                    checked={Stitch}
                                                    type="checkbox"
                                                    onChange={(e) => setStitch(e.target.checked)}
                                                    className="form-custom-upload-react-check-box"
                                                />
                                                <span className="ms-3 checkbox-upload">Stitch</span>
                                            </div>
                                        </div>
                                    </div>
                                    <div>
                                        <span className="mt-5 kiem-duyet-title">
                                            Ch√∫ng t√¥i s·∫Ω ki·ªÉm tra xem video c·ªßa b·∫°n c√≥ s·ª≠ d·ª•ng √¢m thanh vi ph·∫°m b·∫£n
                                            quy·ªÅn hay kh√¥ng. N·∫øu ch√∫ng t√¥i ph√°t hi·ªán c√≥ vi ph·∫°m, b·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a
                                            video tr∆∞·ªõc khi ƒëƒÉng.
                                        </span>
                                    </div>
                                    <div className="button-submit">
                                        <button className="close-upload" onClick={handleback}>
                                            H·ªßy b·ªè
                                        </button>
                                        <button className="submit-upload" onClick={handleSubmit}>
                                            ƒêƒÉng
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <Footer />
            <ModalRender isOpen={isOpen} handleToggleModal={handleToggleModal} />
            {isLoading && (
                <div className="loading-upload">
                    <div className="overlay-loading"></div>
                    <div className="parents-upload-loading">
                        <ClimbingBoxLoader loading={isLoading} color="#36d7b7" />
                        <span className="tex-message">ƒêang x·ª≠ l√≠ h√†nh ƒë·ªông c·ªßa b·∫°n</span>
                    </div>
                </div>
            )}
        </>
    );
}

export default Upload;
